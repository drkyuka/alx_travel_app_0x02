# Generated by Django 5.2.3 on 2025-06-14 14:34

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Listing',
            fields=[
                ('listing_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('listing_type', models.CharField(choices=[('HOUSE', 'House'), ('VILLA', 'Villa'), ('TOWNHOUSE', 'Townhouse'), ('LOFT', 'Loft'), ('STUDIO', 'Studio'), ('MANSION', 'Mansion'), ('CASTLE', 'Castle'), ('FARMHOUSE', 'Farmhouse'), ('RESORT', 'Resort'), ('CHALET', 'Chalet'), ('APARTMENT', 'Apartment'), ('TENT', 'Tent'), ('TREEHOUSE', 'Treehouse'), ('YURT', 'Yurt'), ('BOAT', 'Boat'), ('CARAVAN', 'Caravan'), ('TRAILER', 'Trailer'), ('SHACK', 'Shack'), ('HUT', 'Hut'), ('COTTAGE', 'Cottage'), ('BUNGALOW', 'Bungalow'), ('PENTHOUSE', 'Penthouse')], default='APARTMENT', help_text='Type of the listing, e.g., House, Villa, Apartment, etc.', max_length=50)),
                ('price_per_night', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('location_address', models.CharField(max_length=255)),
                ('allowable_guests', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('number_of_bedrooms', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('number_of_bathrooms', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('amenities', models.JSONField(blank=True, default=list, null=True)),
                ('available_from', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Travel Listing',
                'verbose_name_plural': 'Travel Listings',
                'db_table': 'travel_listings',
                'ordering': ['-created_at'],
            },
            managers=[
                ('listings', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='listings_user_set', related_query_name='listings_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='listings_user_set', related_query_name='listings_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('review_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.IntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_listing', to='listings.listing')),
                ('reviewed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_person', to='listings.user')),
            ],
            managers=[
                ('reviews', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='listing',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listings_host', to='listings.user'),
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('booking_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('number_of_guests', models.PositiveIntegerField(default=0, help_text='Number of guests for the booking.')),
                ('booking_status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('check_in_date', models.DateTimeField()),
                ('check_out_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount_due', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booking_listing', to='listings.listing')),
                ('booked_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings_person', to='listings.user')),
            ],
            options={
                'verbose_name': 'Booking',
                'verbose_name_plural': 'Bookings',
                'db_table': 'travel_bookings',
                'ordering': ['-created_at'],
            },
            managers=[
                ('bookings', django.db.models.manager.Manager()),
            ],
        ),
    ]
